apply plugin: 'jacoco'
import org.gradle.util.VersionNumber

jacocoTestReport {
    reports {
        if (VersionNumber.parse(gradle.gradleVersion) < VersionNumber.parse('7.1')) {
            xml.enabled true
        } else {
            xml.required = true
        }
    }
    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: excludeTests)
        }))
    }

    doLast {
        def report = file("${reportsDir}/jacoco/test/jacocoTestReport.xml" as Object)
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser() as Object
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            def covered = it == null? 1D : it.'@covered' as Double
            def missed = it == null? 0D : it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { (it.'@type' == 'INSTRUCTION') }),
                'branch'     : percentage(counters.find { (it.'@type' == 'BRANCH') }),
                'line'       : percentage(counters.find { (it.'@type' == 'LINE') }),
                'complexity' : percentage(counters.find { (it.'@type' == 'COMPLEXITY') }),
                'method'     : percentage(counters.find { (it.'@type' == 'METHOD') }),
                'class'      : percentage(counters.find { (it.'@type' == 'CLASS') })
        ]


        def failures = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
        }

        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each {
                logger.quiet(it)
            }
            logger.quiet("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        } else {
            logger.quiet("Passed Code Coverage Checks")
        }
    }
}